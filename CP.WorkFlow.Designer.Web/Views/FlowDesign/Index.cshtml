@{
    ViewData["Title"] = "流程设计页面";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>HTML5 Diagram Sample Application by Kendo UIÂ®</title>

    <link href="~/lib/Content/css/kendo.common.min.css" rel="stylesheet" />
    <link href="~/lib/Content/css/kendo.rtl.min.css" rel="stylesheet" />
    <link href="~/lib/Content/css/kendo.metro.min.css" rel="stylesheet" />    
    <script src="~/lib/Content/js/jquery-1.12.3.min.js"></script>
    <script src="~/lib/Content/js/angular.js"></script>
    <script src="~/lib/Content/js/jszip.min.js"></script>
    <script src="~/lib/Content/js/react.js"></script>
    <script src="~/lib/Content/js/react-dom.js"></script>
    <script src="~/lib/Content/js/kendo.all.min.js"></script>
    <script src="~/lib/Content/js/kendo.timezones.min.js"></script>    
    
    <link href="~/lib/Content/css/styles.css" rel="stylesheet" />


</head>
<body>
    <!-- Google Tag Manager -->
    <noscript>
        <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-6X92" height="0" width="0" style="display: none; visibility: hidden"></iframe>
    </noscript>
    <script>(function(w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src = '//www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f); })(window, document, 'script', 'dataLayer', 'GTM-6X92');</script>
    <!-- End Google Tag Manager -->
    <div id="menu">
        <div class="header">
            示意图
            <a id="about">关于</a>
        </div>
        <ul></ul>
    </div>
    <div id="splitter">
        <div id="left-pane">
            <div class="pane-content">
                <ul id="shapesPanelBar">
                    <li>
                        基础图形
                        <ul>
                            <li>
                                <span class="shapeItem" data-shape='{"width":120,"height":120,"type":"rectangle"}' style="background-position: 0 0"></span>
                                <span>正方形</span>
                            </li>
                            <li>
                                <span class="shapeItem" data-shape='{"type":"circle","width":120,"height":120}' style="background-position: -60px 0"></span>
                                <span>圆形</span>
                            </li>
                            <li>
                                <span class="shapeItem" data-shape='{"width":120,"height":80,"type":"rectangle"}' style="background-position: -120px 0"></span>
                                <span>长方形</span>
                            </li>
                            <li>
                                <span class="shapeItem" data-shape='{"type":"circle","width":120,"height":80}' style="background-position: -180px 0"></span>
                                <span>椭圆形</span>
                            </li>
                        </ul>
                    </li>
                    <li>
                        多边形
                        <ul>
                            <li>
                                <span class="shapeItem" data-shape='{"path":"M 60,0 L120,44 L97,114 L23,114 L0,44 z"}' style="background-position: -240px 0"></span>
                                <span>五边形</span>
                            </li>
                            <li>
                                <span class="shapeItem" data-shape='{"path":"m30,0 L90,0 L120,52 L90,104 L30,104 L0,52 z"}' style="background-position: -300px 0"></span>
                                <span>六边形</span>
                            </li>
                            <li>
                                <span class="shapeItem" data-shape='{"path":"m60,0 L108.12,23.17 L120,75.24 L86.7,116.99 L33.3,116.99 L0,75.24 L11.88,23.17 z"}' style="background-position: -360px 0"></span>
                                <span>七边形</span>
                            </li>
                            <li>
                                <span class="shapeItem" data-shape='{"path":"m35.15,0 L84.85,0 L120,35.15 L120,84.85 L84.85,120 L35.15,120 L0,84.85 L0,35.15 z"}' style="background-position: -420px 0"></span>
                                <span>八边形</span>
                            </li>
                        </ul>
                    </li>
                    <li>
                        箭头
                        <ul>
                            <li>
                                <span class="shapeItem" data-shape='{"path":"m0,20 L20,0 L20,10 L120,10 L120,30 L20,30 L20,40 z"}' style="background-position: -480px 0"></span>
                                <span>45度</span>
                            </li>
                            <li>
                                <span class="shapeItem" data-shape='{"path":"m0,20 L11.5,0 L11.5,10 L120,10 L120,31 L11.5,31 L11.5,40 z"}' style="background-position: -540px 0"></span>
                                <span>60度</span>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
        <div id="center-pane">
            <div class="pane-content">
                <div id="diagram"></div>
            </div>
        </div>
        <div id="right-pane">
            <div class="pane-content">
                <ul id="configurationPanelBar">
                    <li>
                        画布属性
                        <div id="canvasProperties">
                            <ul>
                                <li>
                                    <span>背景颜色:</span>
                                    <input id="canvasBackgroundColorPicker" class="colorPicker" />
                                </li>
                                <li>
                                    <span>布局:</span>
                                    <input id="canvasLayout" />
                                </li>
                            </ul>
                        </div>
                    </li>
                    <li>
                        图形属性
                        <div id="shapeProperties">
                            <ul>
                                <li>
                                    <span>背景颜色:</span>
                                    <input id="shapeBackgroundColorPicker" class="colorPicker" />
                                </li>
                                <li>
                                    <span>描边颜色:</span>
                                    <input id="shapeStrokeColorPicker" class="colorPicker" />
                                </li>
                                <li>
                                    <span>描边宽度:</span>
                                    <input type="text" id="shapeStrokeWidth" class="numeric" />
                                </li>
                                <li>
                                    <span>宽度:</span>
                                    <input type="text" id="shapeWidth" class="numeric" />
                                </li>
                                <li>
                                    <span>高度:</span>
                                    <input type="text" id="shapeHeight" class="numeric" />
                                </li>
                                <li>
                                    <span>位置X:</span>
                                    <input type="text" id="shapePositionX" class="numeric" />
                                </li>
                                <li>
                                    <span>位置Y:</span>
                                    <input type="text" id="shapePositionY" class="numeric" />
                                </li>
                            </ul>
                        </div>
                    </li>
                    <li>
                        连接属性
                        <div id="connectionProperties">
                            <ul>
                                <li>
                                    <span>开始上限:</span>
                                    <input id="connectionStartCap" />
                                </li>
                                <li>
                                    <span>结束上限:</span>
                                    <input id="connectionEndCap" />
                                </li>
                            </ul>
                        </div>
                    </li>
                    <li>
                        对齐
                        <div id="alignConfiguration" style="width: 100%; padding: 10px; box-sizing: border-box; text-align: left;">
                            <button class="configurationButtons" data-position="top">
                                <span class="alignTop"></span>
                            </button><button class="configurationButtons" data-position="bottom">
                                <span class="alignBottom"></span>
                            </button><button class="configurationButtons" data-position="left">
                                <span class="alignLeft"></span>
                            </button><button class="configurationButtons" data-position="right">
                                <span class="alignRight"></span>
                            </button>
                        </div>
                    </li>
                    <li>
                        排列
                        <div id="arrangeConfiguration">
                            <div style="width: 100%; padding: 10px; box-sizing: border-box; text-align: left;">
                                <button class="configurationButtons">
                                    <span class="toFront"></span>
                                </button><button class="configurationButtons">
                                    <span class="toBack"></span>
                                </button>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div id="bottom-box">
        <input id="diagramZoom" />
        <input type="text" id="diagramZoomIndicator" class="k-textbox" value="100" style="width: 40px; vertical-align: middle;" />
    </div>

    <div id="window">
        <h2>HTML5 Diagram Sample Application by Progress</h2>

        <p>The Diagramming Tool app was built with HTML5 Kendo UI widgets. Kendo UI framework consists of <a href="http://www.telerik.com/kendo-ui#Widgets">70+ UI widgets</a> that take care of the common functionality of your application, while leaving you with more time to work on its business logic.</p>
        <p>The app demonstrates the Diagram widget functionality and its integration with numerous other Telerik components. The source code is available so you can use it as a base for implementing your custom scenario.</p>
        <p>The sample app enables users to modify, add, remove and connect shapes. Once they are happy with the diagram they have created, they can save it to a file and load it back later.</p>
        <p>Make sure you try the various built-in layouts of the Diagram control showcased in the sample.</p>
        <h3>Featured Kendo UI Widgets</h3>
        <ul>
            <li><a href="http://www.telerik.com/kendo-ui/web-button">Button</a></li>
            <li><a href="http://www.telerik.com/kendo-ui/colorpicker">Color Picker</a></li>
            <li><a href="http://www.telerik.com/kendo-ui/diagram">Diagram</a></li>
            <li><a href="http://demos.telerik.com/kendo-ui/web/dragdrop/index.html">Drag & Drop</a></li>
        </ul>
        <ul>
            <li><a href="http://www.telerik.com/kendo-ui/dropdownlist">DropDownList</a></li>
            <li><a href="http://www.telerik.com/kendo-ui/menu">Menu</a></li>
            <li><a href="http://www.telerik.com/kendo-ui/numerictextbox">Numeric TextBox</a></li>
            <li><a href="http://www.telerik.com/kendo-ui/panelbar">PanelBar</a></li>
        </ul>
        <ul>
            <li><a href="http://www.telerik.com/kendo-ui/splitter">Splitter</a></li>
            <li><a href="http://www.telerik.com/kendo-ui/slider">Slider</a></li>
            <li><a href="http://www.telerik.com/kendo-ui/upload">Upload</a></li>
            <li><a href="http://www.telerik.com/kendo-ui/window">Window</a></li>
        </ul>

        <p>Copyright &copy; 2018, Progress Software Corporation and/or its subsidiaries or affiliates. All Rights Reserved.</p>
    </div>

    <script>
        var diagram;//定义示意图
        var m_data;//定义流程数据
        var ImgPath = "~/lib/Content/images/";
        $(function () {

            //定义字段
            var Shape = kendo.dataviz.diagram.Shape,//创建图形
                Connection = kendo.dataviz.diagram.Connection,//创建连接线
                Rect = kendo.dataviz.diagram.Rect,//创建形状
                Point = kendo.dataviz.diagram.Point,//创建点
                selected;//创建已选择的项

            $("#canvasProperties").on("change", canvasPropertiesChange);

            var layoutMapping = {
                "TreeDown": {
                    type: "tree",
                    subtype: "down"
                },
                "TreeUp": {
                    type: "tree",
                    subtype: "up"
                },
                "TreeLeft": {
                    type: "tree",
                    subtype: "left"
                },
                "TreeRight": {
                    type: "tree",
                    subtype: "right"
                },
                "RadialTree": {
                    type: "tree",
                    subtype: "radial"
                },
                "TipOverTree": {
                    type: "tree",
                    subtype: "typeover"
                },
                "LayeredHorizontal": {
                    type: "layered",
                    subtype: "horizontal"
                },
                "LayeredVertical": {
                    type: "layered",
                    subtype: "vertial"
                },
                "ForceDirected": {
                    type: "force",
                    subtype: "directed"
                },
                "MindmapVertical": {
                    type: "tree",
                    subtype: "mindmapvertical"
                },
                "MindmapHorizontal": {
                    type: "tree",
                    subtype: "mindmaphorizontal"
                }
            };

            //画布属性改变时
            function canvasPropertiesChange() {
                diagram.element.css(
                    "background-color",
                    $("#canvasBackgroundColorPicker").getKendoColorPicker().value());//获取画布颜色

                //设置为画布背景色
                var layout = layoutMapping[$("#canvasLayout").getKendoDropDownList().value()];

                diagram.layout({
                    type: layout.type,
                    subtype: layout.subtype,
                    animation: true
                });
            }

            //图形属性改变时
            $("#shapeProperties").on("change", shapePropertiesChange);

            //图形属性改变时属性方法
            function shapePropertiesChange() {
                var elements = selected || [],//定义元素数据
                    options = {
                        fill: $("#shapeBackgroundColorPicker").getKendoColorPicker().value(),//图形颜色选择器
                        stroke: {
                            color: $("#shapeStrokeColorPicker").getKendoColorPicker().value(),//图形的描边颜色
                            width: $("#shapeStrokeWidth").getKendoNumericTextBox().value()//图形描边宽度
                        }
                    },
                    bounds = new Rect(//重新纠正位置
                        $("#shapePositionX").getKendoNumericTextBox().value(),//图形的坐标X
                        $("#shapePositionY").getKendoNumericTextBox().value(),//图形的坐标Y
                        $("#shapeWidth").getKendoNumericTextBox().value(),//图形的宽度
                        $("#shapeHeight").getKendoNumericTextBox().value()//图形的高度
                    ),
                    element, i;//定义

                for (i = 0; i < elements.length; i++) {
                    element = elements[i];
                    if (element instanceof Shape) {//true 实例element在不在Shape构造函数中
                        element.redraw(options);//重画颜色

                        element.bounds(bounds);//重绑边界
                    }
                }
            }

            //连接线属性改变
            function connectionPropertiesChange() {
                var elements = selected || [],//定义元素组
                    options = {
                        startCap: $("#connectionStartCap").getKendoDropDownList().value(),//开始上限值
                        endCap: $("#connectionEndCap").getKendoDropDownList().value()//结束上限值
                    },
                    element;//定义

                for (i = 0; i < elements.length; i++) {
                    element = elements[i];
                    if (element instanceof Connection) {//判断element在不在Connection构造函数内
                        element.redraw(options);//重画
                    }
                }
            }
            //连接线的属性改变时
            $("#connectionProperties").on("change", connectionPropertiesChange);

            //kendo 绑定按钮事件
            $("#alignConfiguration .configurationButtons").kendoButton({//对齐方式下的按钮点击
                click: function(e) {
                    var value = this.element.data("position");
                    diagram.alignShapes(value);//形状对齐
                }
            });

            $("#arrangeConfiguration .configurationButtons").kendoButton({
                click: function (e) {
                    var methodName = this.element.find("span").attr("class");
                    diagram[methodName]();
                }
            });

            $("#diagramZoomIndicator").change(function() {
                var value = $(this).val();
                $("#diagramZoom").getKendoSlider().value(value);
                diagram.zoom(value);
            });

            //清空
            function reset() {
                diagram.clear();
            }

            //撤回
            function undo() {
                diagram.undo();
            }

            //重做
            function redo() {
                diagram.redo();
            }

            //复制
            function copyItem() {
                diagram.copy();
            }

            //粘贴
            function pasteItem() {
                diagram.paste();
            }

            //菜单对应的执行动作
            var actions = {
                "空白页": reset,
                "撤回": undo,
                "重做": redo,
                "复制": copyItem,
                "粘贴": pasteItem
            };

            //菜单
            $("#menu ul").kendoMenu({
                dataSource: [
                    { text: "新建", spriteCssClass: "new-item", items: [
                        { text: "空白页", spriteCssClass: "blank-item", cssClass: "active" }
                        ]
                    },
                    { text: "打开<input id='upload' type='file' name='files' />", encoded: false, spriteCssClass: "open-item", cssClass: "upload-item" },
                    { text: "保存<a id='export' download='diagram.json'></a>", encoded: false, spriteCssClass: "save-item" },
                    { text: "撤回", spriteCssClass: "undo-item", cssClass: "active" },
                    { text: "重做", spriteCssClass: "redo-item", cssClass: "active" },
                    { text: "复制", spriteCssClass: "copy-item", cssClass: "active" },
                    { text: "粘贴", spriteCssClass: "paste-item", cssClass: "active" }
                ],
                select: function(e) {
                    var item = $(e.item),
                        itemText = item.children(".k-link").text();

                    if (!item.hasClass("active")) {
                        return;
                    }
                    actions[itemText.charAt(0).toLowerCase() + itemText.slice(1)]();
                }
            });

            //保存导出
            $("#export").on("click", function() {
                var json = JSON.stringify(diagram.save()),
                    blob = new Blob([json], {type: "application\/json"});;
                
                //浏览器下载方式
                if (navigator.msSaveBlob) {
                    navigator.msSaveBlob(blob, this.getAttribute("download"));
                } else {
                    this.href = window.URL.createObjectURL(blob);
                }
            });

            //打开上传--TODO:待调试
            $("#upload").kendoUpload({
                async: {
                    saveUrl: "save",//保存的url，即调用的接口
                    removeUrl: "remove",
                    autoUpload: true
                },
                showFileList: false,
                localization: {
                    select: ""
                },
                select: function(e) {
                    if (typeof (FileReader) !== "undefined") {
                        var f = e.files[0].rawFile,
                            reader = new FileReader;

                        reader.onload = (function(file) {
                            return function(e) {
                                diagram.load(JSON.parse(e.target.result));
                            };
                        })(f);

                        reader.readAsBinaryString(f);
                    }
                }
            });

            //窗格配置
            $("#splitter").kendoSplitter({
                panes: [
                    { collapsible: true, size: "200px" },//第一个窗格可调整，且宽度为200px
                    { collapsible: false, scrollable: false },//第二个窗格不能调整，且没有滚动条
                    { collapsible: true, size: "300px" }//第三个窗格可调整，且宽度为300px
                ]
            });


            //初始化设计框并加载数据
            LodinData();

            //双击点击事件
            $("#diagram").dblclick(function () {
                alert("oh,你双击了我！");
            });

            //更新图形属性
            function updateShapeProperties(shape) {
                $("#shapeBackgroundColorPicker").getKendoColorPicker().value(kendo.parseColor(shape.background));
                $("#shapeStrokeColorPicker").getKendoColorPicker().value(kendo.parseColor(shape.stroke.color));
                $("#shapeStrokeWidth").getKendoNumericTextBox().value(shape.stroke.width);
                $("#shapeWidth").getKendoNumericTextBox().value(shape.width);
                $("#shapeHeight").getKendoNumericTextBox().value(shape.height);
                $("#shapePositionX").getKendoNumericTextBox().value(shape.x);
                $("#shapePositionY").getKendoNumericTextBox().value(shape.y);
            }

            //更新连接线属性
            function updateConnectionProperties(shape) {
                $("#connectionStartCap").getKendoDropDownList().value(shape.startCap);
                $("#connectionEndCap").getKendoDropDownList().value(shape.endCap);
            }

            //左侧折叠窗格
            $("#shapesPanelBar").kendoPanelBar({
                expandMode: "multiple"
            }).getKendoPanelBar().expand(">li", false);
            //右侧折叠窗格
            $("#configurationPanelBar").kendoPanelBar({
                expandMode: "multiple"
            }).getKendoPanelBar().expand(">li", false);
            //颜色选择器
            $(".colorPicker").kendoColorPicker({
                value: "#ffffff",
                buttons: false
            });
            //画布布局属性下拉框
            $("#canvasLayout").kendoDropDownList({
                dataTextField: "text",
                dataValueField: "value",
                dataSource: [
                    { value: "TreeDown", text: "Tree Down" },
                    { value: "TreeUp", text: "Tree Up" },
                    { value: "TreeLeft", text: "Tree Left" },
                    { value: "TreeRight", text: "Tree Right" },
                    { value: "RadialTree", text: "Radial Tree" },
                    { value: "TipOverTree", text: "Tip-Over Tree" },
                    { value: "LayeredHorizontal", text: "Layered Horizontal" },
                    { value: "LayeredVertical", text: "Layered Vertical" },
                    { value: "ForceDirected", text: "Force directed" },
                    { value: "MindmapVertical", text: "Mindmap Vertical" },
                    { value: "MindmapHorizontal", text: "Mindmap Horizontal" }
                ]
            });

            //连接线开始上限下拉框
            $("#connectionStartCap").kendoDropDownList({
                dataTextField: "text",
                dataValueField: "value",
                dataSource: [
                    { value: "None", text: "None" },
                    { value: "ArrowStart", text: "Arrow Start" },
                    { value: "ArrowEnd", text: "Arrow End" },
                    { value: "FilledCircle", text: "Filed Circle" }
                ]
            });

            //连接线结束下限下拉框
            $("#connectionEndCap").kendoDropDownList({
                dataTextField: "text",
                dataValueField: "value",
                dataSource: [
                    { value: "None", text: "None" },
                    { value: "ArrowStart", text: "Arrow Start" },
                    { value: "ArrowEnd", text: "Arrow End" },
                    { value: "FilledCircle", text: "Filed Circle" }
                ]
            });

            //更新示意图调整大小
            function updateSliderIndicator(e) {
                $("#diagramZoomIndicator").attr("value", e.value);

                diagram.zoom(e.value / 100);
            }

            //示意图滑块大小
            $("#diagramZoom").kendoSlider({
                min: 10,
                max: 200,
                value: 100,
                smallStep: 10,
                largeStep: 50,
                tickPlacement: "none",
                showButtons: false,
                change: updateSliderIndicator,
                slide: updateSliderIndicator
            });

            //数值变量控件
            $(".numeric").kendoNumericTextBox();

            //设置窗口大小
            $("#window").kendoWindow({
                visible: false,
                width: 800,
                resizable: false,
                title: "About"
            });

            //点击关于时的弹窗
            $("#about").click(function() {
                $("#window").getKendoWindow().center().open();
            });

            //图形窗格条拖动设置
            $("#shapesPanelBar .shapeItem").kendoDraggable({
                hint: function() {
                    return this.element.clone();//从左侧窗格把元素复制过来
                }
            });

            //从左侧窗格把图形拖拽完成后触发
            $("#diagram").kendoDropTarget({
                drop: function(e) {
                    var item, pos, transformed;//定义
                    if (e.draggable.hint) {
                        item = e.draggable.hint.data("shape");
                        pos = e.draggable.hintOffset;
                        pos = new Point(pos.left, pos.top);
                        var transformed = diagram.documentToModel(pos);
                        item.x = transformed.x;
                        item.y = transformed.y;

                        //console.log(item);
                        diagram.addShape(item);//获取具体数据更改位置
                    }
                }
            });
        });
        var DesignViewType = 0;
        //初始化设计器
        function IninKendoDiagram() {
            if (diagram) {
                return;
            }
           diagram = $("#diagram").kendoDiagram({
                theme: "default",//主体默认
                //dataSource: {//数据源--TODO：需要调整
                //    data: [{
                //        name: "0",
                //        items: [{
                //            name: "0"
                //        }]
                //    }],
                //    schema: {//映射
                //        model: {
                //            children: "items"
                //        }
                //    }
               //},
                dataSource:{},
                shapeDefaults: {//图形默认
                    width: 120,
                    height: 120,
                    fill: "#8ebc00"
                },
                layout: {//布局
                    type: "tree",
                    subtype: "right"
                },
                select: function (e) {//选择时
                    if (e.selected.length) {
                        selected = e.selected;
                        var element = e.selected[0];
                        if (element instanceof Shape) {//element 属于Shape，则返回true
                            updateShapeProperties(element.options);
                        } else {
                            updateConnectionProperties(element.options);
                        }
                    }
                },
                editable: {//图形是否可编辑
                    resize: false//禁止拉伸图形大小
                }
           }).getKendoDiagram();
        }

        //加载数据
        function LodinData() {
            $.get("http://123.57.154.149:600/DLWeb/api/Flow/GetWorkFlowXML?SessionKey=ec4060e8-1463-4261-98d1-002965a17504&CurUserId=1&FlowId=78", function (info) {
                var m_shapes = [];//图形数组
                var m_connections = [];//连接线数组
                //流程获取成功执行
                if (info.Result) {
                    DesignViewType = info.DesignViewType;
                    //var str=info.XML.replace(new RegExp("\\\""),"\"");//将获取的数据中特殊字符去掉
                    str = loadXml(info.XML);//将xml字符串转换成xml对象
                    var h_json_liucheng = xmltojson(str, 'WorkFlow').WorkFlow;//流程信息
                    var h_json_shapes = xmltojson(str, 'Activity').Activity;//活动信息(数组)
                    var h_json_lines = xmltojson(str, 'Rule').Rule;//连接线信息(数组)
                    FlowUniqueId = h_json_liucheng.UniqueID;
                    if (h_json_shapes != undefined) {
                        if (h_json_shapes.length == undefined) {
                            var h_text = h_json_shapes.ActivityName;
                            var TextItem = GetText(h_json_shapes.Type, h_text);
                            h_text1 = TextItem[0];
                            h_text2 = TextItem[1];
                            h_text3 = TextItem[2];

                            var obj1 = {
                                "id": h_json_shapes.UniqueID,
                                "x": parseFloat(h_json_shapes.PositionX),
                                "y": parseFloat(h_json_shapes.PositionY),
                                "width": 0,
                                "height": 0,
                                "fill": "white",
                                "text1": h_text1,
                                "text2": h_text2,
                                "text3": h_text3,
                                "source": ImgPath + h_json_shapes.Type + ".png"
                            };
                            m_shapes.push(obj1);
                        } else {
                            $.each(h_json_shapes, function (Index, shapesitem) {
                                var h_text = shapesitem.ActivityName;
                                var TextItem = GetText(shapesitem.Type, h_text);
                                h_text1 = TextItem[0];
                                h_text2 = TextItem[1];
                                h_text3 = TextItem[2];

                                var obj1 = {
                                    "id": shapesitem.UniqueID,
                                    "x": parseFloat(shapesitem.PositionX),
                                    "y": parseFloat(shapesitem.PositionY),
                                    "width": 0,
                                    "height": 0,
                                    "fill": "white",
                                    "text1": h_text1,
                                    "text2": h_text2,
                                    "text3": h_text3,
                                    "source": ImgPath + shapesitem.Type + ".png"
                                };
                                m_shapes.push(obj1);
                            });

                        }
                    }
                    if (h_json_lines != undefined) {
                        if (h_json_lines.length == undefined) {
                            var h_start = '';
                            ///判断是否双向箭头
                            if (h_json_lines.LinkType == 'Double') {
                                h_start = "ArrowEnd";
                            }
                            var obj2 = {
                                "id": h_json_lines.UniqueID,
                                "to": {
                                    "shapeId": h_json_lines.EndActivityUniqueID
                                },
                                "from": {
                                    "shapeId": h_json_lines.BeginActivityUniqueID
                                },
                                "fromX": parseFloat(h_json_lines.BeginPointX),
                                "fromY": parseFloat(h_json_lines.BeginPointY),
                                "toX": parseFloat(h_json_lines.EndPointX),
                                "toY": parseFloat(h_json_lines.EndPointY),
                                "startCap": h_start
                            };
                            m_connections.push(obj2);
                        } else {
                            $.each(h_json_lines, function (Index, linesitem) {
                                var h_start = '';
                                //判断是否双向箭头
                                if (linesitem.LinkType == 'Double') {
                                    h_start = "ArrowEnd";
                                }
                                var obj2 = {
                                    "id": linesitem.UniqueID,
                                    "to": {
                                        "shapeId": linesitem.EndActivityUniqueID
                                    },
                                    "from": {
                                        "shapeId": linesitem.BeginActivityUniqueID
                                    },
                                    "fromX": parseFloat(linesitem.BeginPointX),
                                    "fromY": parseFloat(linesitem.BeginPointY),
                                    "toX": parseFloat(linesitem.EndPointX),
                                    "toY": parseFloat(linesitem.EndPointY),
                                    "startCap": h_start
                                };
                                m_connections.push(obj2);
                            });

                        }
                    }

                    m_data = {
                        "shapes": m_shapes,
                        "connections": m_connections
                    };
                    IninKendoDiagram();
                    diagram.load(m_data);
                    //setTimeout('ThisShow()', 2000);
                } else {
                    alert(info.ErrorMsg);
                }
            });

        }

        //xml字符串转xml对象
        function loadXml(str) {
            if (str == null) {
                return null;
            }
            var doc = str;
            try {
                doc = createXMLDOM();
                doc.async = false;
                doc.loadXML(str);
            } catch (e) {
                doc = $.parseXML(str);
            }
            return doc;
        }

        /**
         *xml对象转json对象
         *xmlObj:xml对象
         *nodename:节点路径('ROOT/ITEM')
         *isarray:true,强制返回数组对象
         **/
        function xmltojson(xmlObj, nodename, isarray) {
            var obj = $(xmlObj);
            var itemobj = {};
            var nodenames = "";
            var getAllAttrs = function (node) {//递归解析xml 转换成json对象
                var _itemobj = {};
                var notNull = false;
                var nodechilds = node.childNodes;
                var childlenght = nodechilds.length;
                var _attrs = node.attributes;
                var firstnodeName = "#text";
                try {
                    firstnodeName = nodechilds[0].nodeName;
                } catch (e) {
                }
                if ((childlenght > 0 && firstnodeName != "#text") || _attrs.length > 0) {
                    var _childs = nodechilds;
                    var _childslength = nodechilds.length;
                    var _fileName_ = "";
                    if (undefined != _attrs) {
                        var _attrslength = _attrs.length;
                        for (var i = 0; i < _attrslength; i++) {//解析xml节点属性
                            var attrname = _attrs[i].nodeName;
                            var attrvalue = _attrs[i].nodeValue;
                            _itemobj[attrname] = attrvalue;
                        }
                    }
                    for (var j = 0; j < _childslength; j++) {//解析xml子节点
                        var _node = _childs[j];
                        var _fildName = _node.nodeName;
                        if ("#text" == _fildName) {
                            break;
                        }
                        ;
                        if (_itemobj[_fildName] != undefined) {//如果有重复的节点需要转为数组格式
                            if (!(_itemobj[_fildName] instanceof Array)) {
                                var a = _itemobj[_fildName];
                                _itemobj[_fildName] = [a];//如果该节点出现大于一个的情况 把第一个的值存放到数组中
                            }
                        }
                        var _fildValue = getAllAttrs(_node);
                        try {
                            _itemobj[_fildName].push(_fildValue);
                        } catch (e) {
                            _itemobj[_fildName] = _fildValue;
                            _itemobj["length"] = 1;
                        }
                    }
                } else {
                    _itemobj = (node.textContent == undefined) ? node.text : node.textContent;
                }
                return _itemobj;
            };
            if (nodename) {
                nodenames = nodename.split("/")
            }
            for (var i = 0; i < nodenames.length; i++) {
                obj = obj.find(nodenames[i]);
            }
            $(obj).each(function (key, item) {
                if (itemobj[item.nodeName] != undefined) {
                    if (!(itemobj[item.nodeName] instanceof Array)) {
                        var a = itemobj[item.nodeName];
                        itemobj[item.nodeName] = [a];
                    }
                    itemobj[item.nodeName].push(getAllAttrs(item));
                } else {
                    if (nodenames.length > 0) {
                        itemobj[item.nodeName] = getAllAttrs(item);
                    } else {
                        itemobj[item.firstChild.nodeName] = getAllAttrs(item.firstChild);
                    }
                }
            });
            if (nodenames.length > 1) {
                itemobj = itemobj[nodenames[nodenames.length - 1]];
            }
            if (isarray && !(itemobj instanceof Array) && itemobj != undefined) {
                itemobj = [itemobj];
            }
            return itemobj;
        };

        //根据节点类型和内容拆分项，最多三行
        //Type：节点类型名称或序号
        //
        function GetText(type, h_action_name) {
            var textLength = h_action_name.replace(/[^\x00-\xff]/g, "**").length;
            var MaxTextCount = 5;
            var MaxTextLength = 0;
            if (type == "INITIAL" || type == "COMPLETION" || type == "VirtualEnd" || type == 0 || type == 1 || type == 4 || type == 6) {
                MaxTextLength = MaxTextCount * 2;
            } else if (type == "INTERACTION" || type == 2) {
                MaxTextLength = MaxTextCount * 2;
            }
            else if (type == "AND_BRANCH" || type == 3) {
                MaxTextLength = MaxTextCount * 2;
            }
            if (textLength <= MaxTextLength) {
                return [h_action_name, "", ""];
            } else {
                var text1 = "";
                var text2 = "";
                var text3 = "";
                //自动截取字符串
                if (h_action_name.length > MaxTextCount) {
                    text1 = h_action_name.substring(0, MaxTextCount);
                    text2 = h_action_name.substring(MaxTextCount, h_action_name.length);
                    if (text2.length > MaxTextCount) {
                        text2 = h_action_name.substring(MaxTextCount, MaxTextCount * 2);
                        text3 = h_action_name.substring(MaxTextCount * 2, h_action_name.length);
                    }
                }
                if (text3 != "") {
                    if (escape(text3).indexOf("%u") == -1) {
                        //字符太少的时候合并
                        if (text3 && text3.indexOf('(') == -1) {
                            text2 = text2 + text3;
                            text3 = "";
                        }
                    }
                } else {
                    if (escape(text2).indexOf("%u") == -1) {
                        //字符太少的时候合并
                        if (text2 && text2.indexOf('(') == -1) {
                            text1 = text1 + text2;
                            text2 = "";
                        }
                    }
                }
                return [text1, text2, text3];
            }
        }

    </script>
</body>
</html>
